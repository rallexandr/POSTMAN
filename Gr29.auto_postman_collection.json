{
	"info": {
		"_postman_id": "9847797b-e5cb-4cba-8d9c-3263a23c73c8",
		"name": "Gr29",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18449569"
	},
	"item": [
		{
			"name": "get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const person = pm.response.json();\r",
							"//парсим json\r",
							"\r",
							"//const responseJson = pm.response.json();\r",
							"let per11son = {\r",
							"    \"age\": \"39\",\r",
							"    \"family\": {\r",
							"        \"children\": [[\"Alex\",24],[\"Kate\",12]],\r",
							"        \"u_salary_1_5_year\": 2400\r",
							"    },\r",
							"    \"name\": \"Alex\",\r",
							"    \"salary\": 600\r",
							"}\r",
							"\r",
							"\r",
							"pm.test(\"item_2 person\", function()\r",
							"{pm.expect(+person.age).to.equal(39);\r",
							"   //постман.ожидаем(что переменная age, которая находится в person).равна(39)\r",
							"   //+ это приведение строки age к числу\r",
							"});\r",
							"\r",
							"let item_1 = 2;\r",
							"pm.test(\"item_1 test\", function()\r",
							"{   pm.expect(item_1).to.equal(2)   })\r",
							"   //постман.ожидаем(что переменная item_1).равна(2)\r",
							"   \r",
							"\r",
							"\r",
							"pm.test(\"item_3 person\", function()\r",
							"{   pm.expect(person.family.children[1][1]).to.equal(12)    })\r",
							"//в массиве family есть вложенный массив children, проверяем если у первого элемента массива первое значение равно 12 (массив начинается с нуля)\r",
							"\r",
							"pm.test(\"item_4 person\", function()\r",
							"{   pm.expect(person).to.have.property(\"name\")  })\r",
							"//key:value - это property нашего json. здесь мы проверяем, если есть параметр name\r",
							"\r",
							"pm.test(\"item_5 person\", function()\r",
							"{   pm.expect(person).to.deep.include({\"salary\": 600})  })\r",
							"//проверка того, что у нас есть цельный элемент, в данном примере это {\"salary\": 600}\r",
							"\r",
							"pm.test(\"item_6 person\", function()\r",
							"{   pm.expect(person.family.children[1]).to.deep.include(12)    })\r",
							"//в массиве family есть вложенный массив children, проверяем если у первого элемента массива есть значение 12 (массив начинается с нуля)\r",
							"//include - частичное соответствие\r",
							"\r",
							"pm.test(\"item_7 person\", function()\r",
							"{   pm.expect(person.family.children[1]).to.be.a(\"Array\")    })\r",
							"//проверка на тип данных. \r",
							"\r",
							"pm.test(\"item_8 person\", function()\r",
							"{   pm.expect(person.name).to.be.a(\"String\")    })\r",
							"//проверка на тип данных. \r",
							"\r",
							"pm.test(\"item_9 person\", function()\r",
							"{   pm.expect(person.family.children[1]).to.be.an(\"Array\").that.include(12)    })\r",
							"//двойная проверка на тип данных и что в нем содержится 12\r",
							"\r",
							"pm.test(\"item_10 person\", function()\r",
							"{pm.expect(person.family.u_salary_1_5_year).to.deep.eql(2400)})\r",
							"//eql - полное соответствие"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "39",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "600",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Alex",
							"type": "text"
						},
						{
							"key": "aust_token",
							"value": "\"/s34lfgbj/Alex/jjd909/24311kjkWpqc3462201251368evny\"",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/get_test_user",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//проверить что в body приходит правильный string\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "First_request Copy",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/get_method?name=Vadim&age=32&salary=2000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"get_method"
					],
					"query": [
						{
							"key": "name",
							"value": "Vadim"
						},
						{
							"key": "age",
							"value": "32"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "5007_1",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5007/",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "get_method",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/get_method?name=Alex&age=39",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"get_method"
					],
					"query": [
						{
							"key": "name",
							"value": "Alex"
						},
						{
							"key": "age",
							"value": "39"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_1",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Alex",
							"type": "text"
						},
						{
							"key": "age",
							"value": "39",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "600",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_1?name=Alex&age=39&weight=90",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_1"
					],
					"query": [
						{
							"key": "name",
							"value": "Alex"
						},
						{
							"key": "age",
							"value": "39"
						},
						{
							"key": "weight",
							"value": "90"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_2",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Alex",
							"type": "text"
						},
						{
							"key": "age",
							"value": "39",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "600",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_2?name=Alex&age=39&salary=600",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_2"
					],
					"query": [
						{
							"key": "name",
							"value": "Alex"
						},
						{
							"key": "age",
							"value": "39"
						},
						{
							"key": "salary",
							"value": "600"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "my_object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"//Спарсить request.\r",
							"let req = pm.request.url.query.all()\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"1\", function () {\r",
							"    pm.expect(req[0].value).to.eql(jsonData.name);\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"2\", function () {\r",
							"    pm.expect(req[1].value).to.eql(jsonData.age);\r",
							"});\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"3\", function () {\r",
							"    pm.expect(+req[2].value).to.eql(jsonData.salary);\r",
							"});\r",
							"\r",
							"//Вывести в консоль параметр family из response\r",
							"console.log(jsonData.family)\r",
							"\r",
							"//Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"4\", function () { pm.expect(jsonData.family.pets.dog).to.have.property(\"name\") });\r",
							"\r",
							"//Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"5\", function () { pm.expect(jsonData.family.pets.dog).to.have.property(\"age\") });\r",
							"\r",
							"//Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"5\", function () { pm.expect(jsonData.family.pets.dog.name).to.eql(\"Luky\") });\r",
							"\r",
							"// Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"5\", function()\r",
							"{   pm.expect(jsonData.family.pets.dog.age).to.eql(4)  });"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Alex",
							"type": "text"
						},
						{
							"key": "age",
							"value": "39",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "600",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Alex&age=39&salary=600",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Alex"
						},
						{
							"key": "age",
							"value": "39"
						},
						{
							"key": "salary",
							"value": "600"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "My_object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"//Спарсить request.\r",
							"let req = pm.request.url.query.all()\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"test_1\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(req[0].value);\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"test_2\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(+req[1].value);\r",
							"});\r",
							"\r",
							"//Вывести в консоль параметр salary из request.\r",
							"console.log(req[2].value);\r",
							"\r",
							"//Вывести в консоль параметр salary, 0-й, 1-й и 2-й элементы параметра salary из response.\r",
							"console.log(jsonData.salary);\r",
							"console.log(jsonData.salary[0]);\r",
							"console.log(jsonData.salary[1]);\r",
							"console.log(jsonData.salary[2]);\r",
							"\r",
							"//Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"test_3\", function () {\r",
							"    pm.expect(+jsonData.salary[0]).to.eql(+req[2].value);\r",
							"});\r",
							"\r",
							"//Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"test_4\", function () {\r",
							"    pm.expect(+jsonData.salary[1]).to.eql(+req[2].value*2);\r",
							"});\r",
							"\r",
							"//Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"test_5\", function () {\r",
							"    pm.expect(+jsonData.salary[2]).to.eql(+req[2].value*3);\r",
							"});\r",
							"\r",
							"//Передать в окружении переменные name, age, salary\r",
							"pm.environment.set(\"name\", req[0].value);\r",
							"pm.environment.set(\"age\", req[1].value);\r",
							"pm.environment.set(\"salary\", req[2].value);\r",
							"\r",
							"// Передать в окружение переменную name, age, salary\r",
							"\r",
							"\r",
							"/*pm.environment.set(\"name\", pm.request.url.query.get(\"name\"));\r",
							"pm.environment.set(\"age\", pm.request.url.query.get(\"age\"));\r",
							"pm.environment.set(\"salary\", pm.request.url.query.get(\"salary\"));*/\r",
							"\r",
							"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"jsonData.salary.forEach((item) => {console.log(item)})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Alex",
							"type": "text"
						},
						{
							"key": "age",
							"value": "39",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "600",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Alex&age=39&salary=600",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Alex"
						},
						{
							"key": "age",
							"value": "39"
						},
						{
							"key": "salary",
							"value": "600"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "my_login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"let user_token = jsonData.token;\r",
							"pm.environment.set(\"token\", user_token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "Alex",
							"type": "text"
						},
						{
							"key": "password",
							"value": "2012",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/login",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//парсим json\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Alex\",\r\n    \"age\": 39,\r\n    \"salary\": 500,\r\n    \"auth_token\": \"{{token}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "my_user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"//Спарсить request.\r",
							"let req = request.data\r",
							"\r",
							"//Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Your test 1\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"start_qa_salary\")\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Your test 2\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_6_months\")\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Your test 3\", function () {\r",
							"pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\")});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "\"/s34lfgbj/Alex/jjd909/64418kjkWpqc50622012236107evny\"",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "my_user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"1\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(\"Alex\");\r",
							"    });\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"2\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(\"39\");\r",
							"    });\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"3\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(600);\r",
							"    });\r",
							"\r",
							"//Спарсить request.\r",
							"let req = request.data;\r",
							"//присваиваем переменной req значения из запроса\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"4\", function () {\r",
							"    pm.expect(req.name).to.eql(jsonData.name);\r",
							"    });\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"5\", function () {\r",
							"    pm.expect(req.age).to.eql(jsonData.age);\r",
							"    });\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"6\", function () {\r",
							"    pm.expect(+req.salary).to.eql(jsonData.salary);\r",
							"    });\r",
							"\r",
							"//Вывести в консоль параметр family из response.\r",
							"console.log (jsonData.family);\r",
							"\r",
							"//Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"7\", function () {\r",
							"    pm.expect(req.salary*4).to.eql(jsonData.family.u_salary_1_5_year);\r",
							"    });\r",
							"    "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Alex",
							"type": "text"
						},
						{
							"key": "age",
							"value": "39",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "600",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"  //парсим json\r",
							"\r",
							"let salary_12 = jsonData.person.u_name[1] * 2.9\r",
							"\r",
							"console.log (salary_12)\r",
							"\r",
							"pm.test(\"Your test name\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(salary_12);\r",
							"});\r",
							"\r",
							"// спарсили request\r",
							"let req = JSON.parse(request.data)\r",
							"let req_salary = req.salary\r",
							"console.log (\"req_salary = \", req_salary)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Alex\",\r\n    \"age\": 39,\r\n    \"salary\": 500,\r\n    \"auth_token\": \"{{token}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		}
	]
}